<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="4AupG-qVlrmF}%,xS/F]" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="uj!t$ddR!z9MEAD[cJF#" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace esp8266_read_by_naim {" line1="" line2="    let wifi_connected: boolean = false" line3="    let thingspeak_connected: boolean = false" line4="    let last_upload_successful: boolean = false" line5="" line6="    // write AT command with CR+LF ending" line7="    function sendAT(command: string, wait: number = 100) {" line8="        serial.writeString(command + &quot;\u000D\u000A&quot;)" line9="        basic.pause(wait)" line10="    }" line11="" line12="    // wait for certain response from ESP8266" line13="    function waitResponse(): boolean {" line14="        let serial_str: string = &quot;&quot;" line15="        let result: boolean = false" line16="        let time: number = input.runningTime()" line17="        while (true) {" line18="            serial_str += serial.readString()" line19="            if (serial_str.length &gt; 200) serial_str = serial_str.substr(serial_str.length - 200)" line20="            if (serial_str.includes(&quot;OK&quot;) || serial_str.includes(&quot;ALREADY CONNECTED&quot;)) {" line21="                result = true" line22="                break" line23="            } else if (serial_str.includes(&quot;ERROR&quot;) || serial_str.includes(&quot;SEND FAIL&quot;)) {" line24="                break" line25="            }" line26="            if (input.runningTime() - time &gt; 30000) break" line27="        }" line28="        return result" line29="    }" line30="    /**" line31="      * Initialize ESP8266 module and connect it to Wifi router" line32="      */" line33="    //% block=&quot;Initialize ESP8266|RX (Tx of micro:bit) %tx|TX (Rx of micro:bit) %rx|Baud rate %baudrate|Wifi SSID = %ssid|Wifi PW = %pw&quot;" line34="    //% tx.defl=SerialPin.P0" line35="    //% rx.defl=SerialPin.P1" line36="    //% ssid.defl=your_ssid" line37="    //% pw.defl=your_pw" line38="    export function connectWifi(tx: SerialPin, rx: SerialPin, baudrate: BaudRate, ssid: string, pw: string) {" line39="        wifi_connected = false" line40="        thingspeak_connected = false" line41="        serial.redirect(" line42="            tx," line43="            rx," line44="            baudrate" line45="        )" line46="        sendAT(&quot;AT+RESTORE&quot;, 1000) // restore to factory settings" line47="        sendAT(&quot;AT+CWMODE=1&quot;) // set to STA mode" line48="        sendAT(&quot;AT+RST&quot;, 1000) // reset" line49="        sendAT(&quot;AT+CWJAP=\&quot;&quot; + ssid + &quot;\&quot;,\&quot;&quot; + pw + &quot;\&quot;&quot;, 0) // connect to Wifi router" line50="        wifi_connected = waitResponse()" line51="        basic.pause(100)" line52="    }" line53="" line54="    /**" line55="    * Connect to ThingSpeak and download data. It would not download anything if it failed to connect to Wifi or ThingSpeak." line56="    */" line57="    //% block=&quot;download data from ThingSpeak|URL/IP = %ip|read API key = %read_api_key|Field 1 = %n1|Field 2 = %n2|Field 3 = %n3|Field 4 = %n4|Field 5 = %n5|Field 6 = %n6|Field 7 = %n7|Field 8 = %n8&quot;" line58="    //% ip.defl=api.thingspeak.com" line59="    //% read_api_key.defl=your_read_api_key" line60="    export function connectThingSpeak(ip: string, read_api_key: string, n1: number, n2: number, n3: number, n4: number, n5: number, n6: number, n7: number, n8: number) {" line61="        if (wifi_connected &amp;&amp; read_api_key != &quot;&quot;) {" line62="            thingspeak_connected = false" line63="            sendAT(&quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;&quot; + ip + &quot;\&quot;,80&quot;, 0) // connect to website server" line64="            thingspeak_connected = waitResponse()" line65="            basic.pause(100)" line66="            if (thingspeak_connected) {" line67="                //       last_download_successful = false" line68="                let str: string = &quot;GET /update?api_key=&quot; + read_api_key + &quot;&amp;field1=&quot; + n1 + &quot;&amp;field2=&quot; + n2 + &quot;&amp;field3=&quot; + n3 + &quot;&amp;field4=&quot; + n4 + &quot;&amp;field5=&quot; + n5 + &quot;&amp;field6=&quot; + n6 + &quot;&amp;field7=&quot; + n7 + &quot;&amp;field8=&quot; + n8" line69="                sendAT(&quot;AT+CIPSEND=&quot; + (str.length + 2))" line70="                sendAT(str, 0) // upload data" line71="                last_upload_successful = waitResponse()" line72="                basic.pause(100)" line73="            }" line74="        }" line75="    }" line76="" line77="" line78="" line79="}" numlines="80"></mutation></block></statement></block></xml>